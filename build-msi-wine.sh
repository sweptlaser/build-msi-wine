#!/bin/bash

# abort this script at the first nonzero return
set -o errexit

# Always generate a new product code (upgrade codes are unique)
PRODUCT_CODE=$(uuidgen | tr '[a-z]' '[A-Z]');

# get the directory where this script lives
DIR=$(CDPATH= cd -- "$(dirname -- "$0")" && pwd)

# helpful environment variables
export WINE=$(which wine);
export WINEDEBUG="-all";
export WINEDLLOVERRIDES="mscoree,mshtml=";
export MSIDB=$(which msidb);
export LCAB=$(which lcab);
export WINEARCH="win64"

if [ "${WINE}" = "" ] || [ "${MSIDB}" = "" ] || [ "${LCAB}" = "" ]; then
    echo "Missing required tools, ensure that wine, msidb, and lcab can be found.";
    exit -1;
fi

# convenience environment variables
CABNAME="data.cab";
TMP_FOLDER=$(mktemp -d -t build-msi.XXXXXXXXXX);
cleanup_temp()
{
    # Clean up after ourselves
    rm -Rf "${TMP_FOLDER}";
}
trap cleanup_temp EXIT;

print_usage()
{
    printf "Usage: %s [OPTION]... [file to package]...\n" $(basename $0)
    printf "\t-u, --upgrade-code <upgrade code>\n"
    printf "\t-o, --output <output msi>\n"
    printf "\t-f, --dist-folder <parent folder containing distributable files>\n"
    printf "\t-b, --binary-folder <parent folder containing binary/branding files>\n"
    printf "\t-c, --comp-ids <file containing component ids>\n"
    printf "\t-6, --64-bit <64-bit only filename>\n"
    printf "\t-C, --custom-action <unique name>=<TIME>:<CONDITION>:<ID>:<SOURCE>:<TARGET>\n"
    printf "\t-O, --override-file <FILE>=<DIRECTORY>:<FILENAME>:<ATTRIBUTES>:<CONDITION>\n"
    printf "\t-S, --set-feature <FILE>=<TITLE>:<DESCRIPTION>:<DISPLAY>:<LEVEL>\n"
    printf "\t-d, --project-dir <base directory inside 'Program Files'>\n"
    printf "\t-p, --product-name <name of the package'>\n"
    printf "\t-v, --product-version <package version>\n"
}

contains_element()
{
    if [ -z "$2" ]; then
        return 1
    fi
    for ELEM in "${@:2}"; do
        [[ "$ELEM" == "$1" ]] && return 0
    done
    return 1
}

# Optional parameters
PRODUCT_VERSION="1.0";
# Mandatory parameters
OUTPUT="";
SRCFOLDER="";
BINARYFOLDER="";
ID_FILE="";
OVERRIDES="";
PROJECT_DIR="";
UPGRADE_CODE="";
PRODUCT_NAME="";
FEATURE_DETAILS="";
ONLY_64BIT="";
SHORTCUT_INFO="";
MANUFACTURER_DIR=".";
MANUFACTURER="Third Party Developer";
PRODUCT_DESC="No description given.";
while [ "${NOTFOUND}" = ""  ]; do
    case "$1" in
        -p|--product-name)
            PRODUCT_NAME="$2";
            ;;
        -v|--product-version)
            PRODUCT_VERSION="$2";
            ;;
        -d|--project-dir)
            PROJECT_DIR="$2";
            ;;
        -D|--description)
            PRODUCT_DESC="$2";
            ;;
        -m|--manufacturer-dir)
            MANUFACTURER_DIR="$2";
            ;;
        -M|--manufacturer)
            MANUFACTURER="$2";
            ;;
        -u|--upgrade-code)
            UPGRADE_CODE="$2";
            ;;
        -o|--output)
            OUTPUT="$2";
            ;;
        -f|--dist-folder)
            SRCFOLDER="$2";
            ;;
        -b|--binary-folder)
            BINARYFOLDER="$2";
            ;;
        -c|--comp-ids)
            # Note: this is a legacy option, component IDs are now autogenerated
            ID_FILE="$2";
            ;;
        -O|--override-file)
            OVERRIDES="${OVERRIDES}"$'\n'"$2";
            ;;
        -C|--custom-action)
            CUSTOM_ACTIONS="${CUSTOM_ACTIONS}"$'\n'"$2";
            ;;
        -S|--set-feature)
            FEATURE_DETAILS="${FEATURE_DETAILS}"$'\n'"$2";
            ;;
        -s|--shortcut)
            SHORTCUT_INFO="$2";
            ;;
        -6|--64-bit)
            ONLY_64BIT="${ONLY_64BIT} $2";
            ;;
        *)
            NOTFOUND=1;
            ;;
    esac
    if [ "${NOTFOUND}" = "" ]; then
        shift 2;
    fi
done
if [ "${OUTPUT}" = "" ] || [ "${SRCFOLDER}" = "" ] || [ "${UPGRADE_CODE}" = "" ] \
   || [ "${PROJECT_DIR}" = "" ] || [ "${PRODUCT_NAME}" = "" ] || [ "${PRODUCT_VERSION}" = "" ] \
; then
    print_usage;
    exit 1;
fi
if [ ! -d "${SRCFOLDER}" ] ; then
    echo "Error: -d|--dist-folder cannot be found.";
    exit 1;
fi
FILES="$*";

# Copy all the static tables
cp -a "${DIR}/build-msi"/* "${TMP_FOLDER}";

# Generate the CAB file
CABFILES=$(cd "${SRCFOLDER}"; \
    ${LCAB} ${FILES} "${TMP_FOLDER}/${CABNAME}" 2>&1 | sed -n 's|cfileInit: \(.*\) localtime:|\1|gp');
# Update the feature, component and file entries for each file
cat <<EOF > "${TMP_FOLDER}/File.idt"
File	Component_	FileName	FileSize	Version	Language	Attributes	Sequence
s72	s72	l255	i4	S72	S20	I2	i2
File	File
EOF
cat <<EOF > "${TMP_FOLDER}/Componen.idt"
Component	ComponentId	Directory_	Attributes	Condition	KeyPath
s72	S38	s72	i2	S255	S72
Component	Component
EOF
cat <<EOF > "${TMP_FOLDER}/FeatureC.idt"
Feature_	Component_
s38	s72
FeatureComponents	Feature_	Component_
EOF
SEQ="1";
DIRECTORIES="";
FEATURES="";
FEATURE_PARENTS="";
FPS="0";
for FILE in ${CABFILES}; do
    UNIXFILE=$(echo "${FILE}" | sed 's|\\|/|g');
    UNIXDIR=$(dirname "${UNIXFILE}");
    DIRECTORY=$(echo "${UNIXDIR}" | sed -e 's|/|_|g' -e 's|\.|_|g');
    if [ "${DIRECTORY}" = "_" ]; then
        # Easiest to replace all periods with "_" and then "revert" the single period back
        DIRECTORY=".";
    fi
    if [ "${UNIXDIR}" != "." ]; then
        DIRECTORIES="${DIRECTORIES} ${UNIXDIR}";
    fi
    COMPONENT=$(echo "${UNIXFILE}" | sed -e 's|/|_DIR_|g' -e 's|\.|_|g');
    COMPONENT_ID=""
    if [ ! -z "${ID_FILE}" ]; then
        COMPONENT_ID=$(cat "${ID_FILE}" | sed -n "s|^${COMPONENT}\t\(.*\)|\1|gp");
    fi
    if [ -z "${COMPONENT_ID}" ]; then
        COMPONENT_ID="{$(uuid -v 5 ns:URL \"file://${UNIXFILE}\" | tr '[a-z]' '[A-Z]')}";
        if [ ! -z "${ID_FILE}" ]; then
            printf "%s\t%s\n" \
                "${COMPONENT}" \
                "${COMPONENT_ID}" \
            >> "${ID_FILE}";
            echo "Generated new ID for component ${COMPONENT}: ${COMPONENT_ID}";
        fi
    fi
    if [ "${DIRECTORY}" = "." ]; then
        FEATURE="${COMPONENT}";
        DIRECTORY="PROJECTDIR";
        if ! contains_element "${UNIXFILE}" ${FEATURES} ; then
            FEATURES="${FEATURES} ${UNIXFILE}";
            FEATURE_PARENTS[$FPS]="TOPFEATURE";
            FPS=$(($FPS + 1));
        fi
    else
        FEATURE="${DIRECTORY}";
    fi
    BASENAME=$(basename "${UNIXFILE}");
    SIZE=$(cd "${SRCFOLDER}"; stat -c%s "${UNIXFILE}");
    VER="";
    LANG="";
    FILE_ATTR="16384";
    COMP_ATTR="0";
    COMP_CONDITION="";

    # Process any file overrides (change destination path/filename)
    OLDIFS="${IFS}";
    IFS=$'\n';
    for OVERRIDE in ${OVERRIDES}; do
        OVERRIDE_FILE=$(echo "${OVERRIDE}" | sed 's/\([^=]*\)=.*/\1/g');
        if [ "${UNIXFILE}" = "${OVERRIDE_FILE}" ]; then
            OD=$(echo "${OVERRIDE}" | sed 's/.*=\([^:]*\):\([^:]*\):\([^:]*\):\([^:]*\)/\1/g');
            OF=$(echo "${OVERRIDE}" | sed 's/.*=\([^:]*\):\([^:]*\):\([^:]*\):\([^:]*\)/\2/g');
            OA=$(echo "${OVERRIDE}" | sed 's/.*=\([^:]*\):\([^:]*\):\([^:]*\):\([^:]*\)/\3/g');
            OC=$(echo "${OVERRIDE}" | sed 's/.*=\([^:]*\):\([^:]*\):\([^:]*\):\([^:]*\)/\4/g');
            if [ "${OD}" != "" ]; then
                DIRECTORY="${OD}";
            fi
            if [ "${OF}" != "" ]; then
                BASENAME="${OF}";
            fi
            if [ "${OA}" != "" ]; then
                COMP_ATTR="${OA}";
            fi
            if [ "${OC}" != "" ]; then
                COMP_CONDITION="${OC}";
            fi
        fi
    done
    IFS="${OLDIFS}";

    printf "%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\r\n" \
        "${FILE}" \
        "${COMPONENT}" \
        "${BASENAME}" \
        "${SIZE}" \
        "${VER}" \
        "${LANG}" \
        "${FILE_ATTR}" \
        "${SEQ}" \
    >> "${TMP_FOLDER}/File.idt";
    printf "%s\t%s\t%s\t%s\t%s\t%s\r\n" \
        "${COMPONENT}" \
        "${COMPONENT_ID}" \
        "${DIRECTORY}" \
        "${COMP_ATTR}" \
        "${COMP_CONDITION}" \
        "${FILE}" \
    >> "${TMP_FOLDER}/Componen.idt";
    printf "%s\t%s\r\n" \
        "${FEATURE}" \
        "${COMPONENT}" \
    >> "${TMP_FOLDER}/FeatureC.idt";
    SEQ=$((${SEQ} + 1));
done
SEQ=$((${SEQ} - 1));
# Generate the Directory table
cat <<EOF > "${TMP_FOLDER}/Feature.idt"
Feature	Feature_Parent	Title	Description	Display	Level	Directory_	Attributes
s38	S38	L64	L255	I2	i2	S72	i2
Feature	Feature
TOPFEATURE		${PRODUCT_NAME}		1	1		0
EOF
cat <<EOF > "${TMP_FOLDER}/Director.idt"
Directory	Directory_Parent	DefaultDir
s72	S72	l255
Directory	Directory
SourceDir		SourceDir
TARGETDIR		SourceDir
WindowsFolder	TARGETDIR	.
SystemFolder	TARGETDIR	.
SYSTEM32	SystemFolder	.
SYSTEM64	WindowsFolder	Sysnative:.
ProgramFilesFolder	TARGETDIR	.
MAINDIR	ProgramFilesFolder	${MANUFACTURER_DIR}:.
PROJECTDIR	MAINDIR	${PROJECT_DIR}:.
ProgramMenuFolder	TARGETDIR	.
PROGMENUDIR	ProgramMenuFolder	${MANUFACTURER_DIR}
EOF
ALLDIRS="";
for UNIXDIR in ${DIRECTORIES}; do
    UNIXPARENT=$(echo "${UNIXDIR}" | sed -e 's|/[^/]*$||');
    while [ "${UNIXPARENT}" != "${UNIXDIR}" ]; do
        if contains_element "${UNIXDIR}" ${ALLDIRS} ; then
            break;
        fi
        ALLDIRS="${ALLDIRS} ${UNIXDIR}";
        # Directory table entry
        DIRECTORY=$(echo "${UNIXDIR}" | sed -e 's|/|_|g' -e 's|\.|_|g');
        PARENT=$(echo "${UNIXPARENT}" | sed -e 's|/|_|g' -e 's|\.|_|g');
        DIRNAME=$(basename "${UNIXDIR}");
        printf "%s\t%s\t%s\r\n" \
            "${DIRECTORY}" \
            "${PARENT}" \
            "${DIRNAME}" \
        >> "${TMP_FOLDER}/Director.idt";
        # Feature table entry
        if ! contains_element "${UNIXDIR}" ${FEATURES} ; then
            FEATURES="${FEATURES} ${UNIXDIR}";
            FEATURE_PARENTS[$FPS]="${PARENT}"
            FPS=$(($FPS + 1));
        fi
        UNIXDIR="${UNIXPARENT}";
        UNIXPARENT=$(echo "${UNIXDIR}" | sed -e 's|/[^/]*$||');
    done
    if contains_element "${UNIXPARENT}" ${ALLDIRS} ; then
        continue;
    fi
    ALLDIRS="${ALLDIRS} ${UNIXPARENT}";
    # Directory table entry
    DIRECTORY=$(echo "${UNIXPARENT}" | sed -e 's|/|_|g' -e 's|\.|_|g');
    DIRNAME=$(basename "${UNIXPARENT}");
    printf "%s\t%s\t%s\r\n" \
        "${DIRECTORY}" \
        "PROJECTDIR" \
        "${DIRNAME}" \
    >> "${TMP_FOLDER}/Director.idt";
    # Feature table entry
    if ! contains_element "${UNIXPARENT}" ${FEATURES} ; then
        FEATURES="${FEATURES} ${UNIXPARENT}";
        FEATURE_PARENTS[$FPS]="TOPFEATURE"
        FPS=$(($FPS + 1));
    fi
done
# Generate the Feature table
I="0";
for UNIXFILE in ${FEATURES}; do
    FEATURE=$(echo "${UNIXFILE}" | sed -e 's|/|_|g' -e 's|\.|_|g');
    PARENT="${FEATURE_PARENTS[$I]}";
    TITLE="";
    DESCR="";
    DISPL="0";
    LEVEL="1";
    OLDIFS="${IFS}";
    IFS=$'\n';
    for FEATURE_INFO in ${FEATURE_DETAILS}; do
        FEATURE_FILE=$(echo "${FEATURE_INFO}" | sed 's/\([^=]*\)=.*/\1/g');
        if [ "${UNIXFILE}" = "${FEATURE_FILE}" ]; then
            TITLE=$(echo "${FEATURE_INFO}" | sed 's/.*=\([^:]*\):\([^:]*\):\([^:]*\):\([^:]*\)/\1/g');
            DESCR=$(echo "${FEATURE_INFO}" | sed 's/.*=\([^:]*\):\([^:]*\):\([^:]*\):\([^:]*\)/\2/g');
            DISPL=$(echo "${FEATURE_INFO}" | sed 's/.*=\([^:]*\):\([^:]*\):\([^:]*\):\([^:]*\)/\3/g');
            LEVEL=$(echo "${FEATURE_INFO}" | sed 's/.*=\([^:]*\):\([^:]*\):\([^:]*\):\([^:]*\)/\4/g');
        fi
    done
    IFS="${OLDIFS}";
    printf "%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\r\n" \
        "${FEATURE}" \
        "${PARENT}" \
        "${TITLE}" \
        "${DESCR}" \
        "${DISPL}" \
        "${LEVEL}" \
        "" \
        "0" \
    >> "${TMP_FOLDER}/Feature.idt";
    I=$(($I+1));
done
# Generate the Media table
cat <<EOF > "${TMP_FOLDER}/Media.idt"
DiskId	LastSequence	DiskPrompt	Cabinet	VolumeLabel	Source
i2	i2	L64	S255	S32	S72
Media	DiskId
1	${SEQ}	${PRODUCT_NAME}	#${CABNAME}		
EOF
# Generate the Property table
cat <<EOF > "${TMP_FOLDER}/Property.idt"
Property	Value
s72	l0
Property	Property
ALLUSERS	1
ARPHELPLINK	http://www.sweptlaser.com/
ARPPRODUCTICON	Icon.ico
BannerBitmap	bannrbmp
ButtonText_Back	< &Back
ButtonText_Browse	Br&owse
ButtonText_Cancel	Cancel
ButtonText_Exit	&Exit
ButtonText_Finish	&Finish
ButtonText_Ignore	&Ignore
ButtonText_Install	&Install
ButtonText_Next	&Next >
ButtonText_No	&No
ButtonText_OK	OK
ButtonText_Remove	&Remove
ButtonText_Repair	&Repair
ButtonText_Reset	&Reset
ButtonText_Resume	&Resume
ButtonText_Retry	&Retry
ButtonText_Return	&Return
ButtonText_Yes	&Yes
CompleteSetupIcon	completi
ComponentDownload	ftp://anonymous@sweptlaser.com/
CustomSetupIcon	custicon
DefaultUIFont	DlgFont8
DialogBitmap	dlgbmp
DlgTitleFont	{&DlgFontBold8}
ErrIcon	errico
ErrorDialog	ErrorDlg
ExclamationIcon	exclamic
InfoExit	The ${PRODUCT_NAME} setup was interrupted.  Your system has not been modified.  To install this program at a later time, please run the installation again.
InformationIcon	infoico
InstallerIcon	insticon
INSTALLLEVEL	3
InstallMode	Typical
Manufacturer	${MANUFACTURER}
PIDTemplate	12345<###-%%%%%%%>@@@@@
ProductID	none
ProductLanguage	1033
ProductName	${PRODUCT_NAME}
ProductVersion	${PRODUCT_VERSION}
PROGRAMFILES	C:\\
Progress1	Installing
Progress2	installs
PROMPTROLLBACKCOST	P
RELOAD_MENU	0
RemoveIcon	removico
RepairIcon	repairic
Setup	Setup
ShowUserRegistrationDlg	0
UpgradeCode	{${UPGRADE_CODE}}
ProductCode	{${PRODUCT_CODE}}
Wizard	Setup Wizard
EOF
# Generate the Summary table
cat <<EOF > "${TMP_FOLDER}/_Summary.idt"
PropertyId	Value
i2	l255
_SummaryInformation	PropertyId
1	1252
2	${PRODUCT_NAME}
3	${PRODUCT_NAME}
4	${MANUFACTURER}
5	Installer,MSI,Database
6	${PRODUCT_DESC}
7	;1033
8	Administrator
9	{${PRODUCT_CODE}}
11	2001/09/13 16:12:18
12	2001/09/13 16:12:18
13	2014/10/07 09:59:54
14	100
15	0
18	Windows Installer
19	1
EOF
# Generate the Upgrade table
cat <<EOF > "${TMP_FOLDER}/Upgrade.idt"
UpgradeCode	VersionMin	VersionMax	Language	Attributes	Remove	ActionProperty
s38	S20	S20	S255	i4	S255	s72
Upgrade	UpgradeCode	VersionMin	VersionMax	Language	Attributes
{${UPGRADE_CODE}}				0		UPGRADEFOUND
EOF
# Generate the Condition table
cat <<EOF > "${TMP_FOLDER}/Conditio.idt"
Feature_	Level	Condition
s32	i2	S255
Condition	Feature_	Level
EOF
for UNIXFILE in ${ONLY_64BIT}; do
    FEATURE=$(echo "${UNIXFILE}" | sed -e 's|/|_|g' -e 's|\.|_|g');
    printf "%s\t%s\t%s\r\n" \
        "${FEATURE}" \
        "1" \
        "VersionNT64" \
    >> "${TMP_FOLDER}/Conditio.idt";
done
OLDIFS="${IFS}";
IFS=$'\n';
for ACTION_INFO in ${CUSTOM_ACTIONS}; do
    ACTION_NAME=$(echo "${ACTION_INFO}" | sed 's/\([^=]*\)=.*/\1/g');
    ACTION_ID=$(echo "${ACTION_INFO}" | sed 's/.*=\([^:]*\):\([^:]*\):\([^:]*\):\([^:]*\):\([^:]*\)/\3/g');
    ACTION_SRC=$(echo "${ACTION_INFO}" | sed 's/.*=\([^:]*\):\([^:]*\):\([^:]*\):\([^:]*\):\([^:]*\)/\4/g');
    ACTION_TGT=$(echo "${ACTION_INFO}" | sed 's/.*=\([^:]*\):\([^:]*\):\([^:]*\):\([^:]*\):\([^:]*\)/\5/g');
    printf "%s\t%s\t%s\t%s\r\n" \
        "${ACTION_NAME}" \
        "${ACTION_ID}" \
        "${ACTION_SRC}" \
        "${ACTION_TGT}" \
    >> "${TMP_FOLDER}/CustomAc.idt";
done
IFS="${OLDIFS}";
# Generate the InstallUISequence table
cat <<EOF > "${TMP_FOLDER}/InstallU.idt"
Action	Condition	Sequence
s72	S255	I2
InstallUISequence	Action
ExitDialog		-1
UserExit		-2
FatalError		-3
LaunchConditions		100
PrepareDlg		140
FindRelatedProducts		200
AppSearch		400
CCPSearch	NOT Installed	500
RMCCPSearch	NOT Installed	600
CostInitialize		800
FileCost		900
ResolveSource		950
CostFinalize		1000
MigrateFeatureStates		1200
WelcomeDlg	NOT Installed	1225
ResumeDlg	Installed AND (RESUME OR Preselected)	1240
MaintenanceWelcomeDlg	Installed AND NOT RESUME AND NOT Preselected	1250
ProgressDlg		1280
ExecuteAction		1300
EOF
OLDIFS="${IFS}";
IFS=$'\n';
for ACTION_INFO in ${CUSTOM_ACTIONS}; do
    ACTION_NAME=$(echo "${ACTION_INFO}" | sed 's/\([^=]*\)=.*/\1/g');
    ACTION_TIME=$(echo "${ACTION_INFO}" | sed 's/.*=\([^:]*\):\([^:]*\):\([^:]*\):\([^:]*\):\([^:]*\)/\1/g');
    ACTION_COND=$(echo "${ACTION_INFO}" | sed 's/.*=\([^:]*\):\([^:]*\):\([^:]*\):\([^:]*\):\([^:]*\)/\2/g');
    printf "%s\t%s\t%s\r\n" \
        "${ACTION_NAME}" \
        "${ACTION_COND}" \
        "${ACTION_TIME}" \
    >> "${TMP_FOLDER}/InstallU.idt";
done
IFS="${OLDIFS}";
# Generate the Shortcut table
cat <<EOF > "${TMP_FOLDER}/Shortcut.idt"
Shortcut	Directory_	Name	Component_	Target	Arguments	Description	Hotkey	Icon_	IconIndex	ShowCmd	WkDir
s72	s72	l128	s72	s72	S255	L255	I2	S72	I2	I2	S72
Shortcut	Shortcut
EOF
if [ "${SHORTCUT_INFO}" != "" ]; then
    UNIXFILE=$(echo "${SHORTCUT_INFO}" | sed 's/\([^=]*\)=.*/\1/g');
    SHORTCUT_NAME=$(echo "${SHORTCUT_INFO}" | sed 's/.*=\([^:]*\):\([^:]*\):\([^:]*\)/\1/g');
    SHORTCUT_DESC=$(echo "${SHORTCUT_INFO}" | sed 's/.*=\([^:]*\):\([^:]*\):\([^:]*\)/\2/g');
    SHORTCUT_ARGS=$(echo "${SHORTCUT_INFO}" | sed 's/.*=\([^:]*\):\([^:]*\):\([^:]*\)/\3/g');
    SHORTCUT_COMP=$(echo "${UNIXFILE}" | sed -e 's|/|_DIR_|g' -e 's|\.|_|g');
    SHORTCUT_KEY="STARTMENU_${SHORTCUT_COMP}";
    printf "%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\r\n" \
        "${SHORTCUT_KEY}" \
        "PROGMENUDIR" \
        "${SHORTCUT_NAME}" \
        "${SHORTCUT_COMP}" \
        "${SHORTCUT_COMP}" \
        "${SHORTCUT_ARGS}" \
        "${SHORTCUT_DESC}" \
        "0" \
        "Icon.ico" \
        "0" \
        "1" \
        "PROJECTDIR" \
    >> "${TMP_FOLDER}/Shortcut.idt";
fi
# Add all the Binary resources
BINARY_TABLE=""
if [ "${BINARYFOLDER}" != "" ]; then
    cp -a "${BINARYFOLDER}" "${TMP_FOLDER}/Binary";
    BINARY_TABLE="Binary"
fi
cat <<EOF > "${TMP_FOLDER}/Binary.idt"
Name	Data
s72	v0
Binary	Name
EOF
BINARYFILES=$(ls "${TMP_FOLDER}/Binary");
for FILE in ${BINARYFILES}; do
    ABBRV=$(echo "${FILE}" | sed 's/\..*//g');
    printf "%s\t%s\r\n" \
        "${ABBRV}" \
        "${FILE}" \
    >> "${TMP_FOLDER}/Binary.idt";
done
# Add all the Icon resources
cat <<EOF > "${TMP_FOLDER}/Icon.idt"
Name	Data
s72	v0
Icon	Name
EOF
ICONFILES=$(ls "${TMP_FOLDER}/Icon");
for FILE in ${ICONFILES}; do
    printf "%s\t%s\r\n" \
        "${FILE}" \
        "${FILE}" \
    >> "${TMP_FOLDER}/Icon.idt";
done
# Create a database file with all the requested tables
"${MSIDB}" -d "${OUTPUT}" -f "${TMP_FOLDER}" -c -i \
    ActionText \
    AdminExecuteSequence \
    AdminUISequence \
    AdvtExecuteSequence \
    BBControl \
    Billboard \
    Binary \
    CheckBox \
    ComboBox \
    Component \
    Condition \
    Control \
    ControlCondition \
    ControlEvent \
    Dialog \
    Directory \
    Error \
    EventMapping \
    Feature \
    FeatureComponents \
    File \
    Icon \
    InstallExecuteSequence \
    InstallUISequence \
    ListBox \
    ListView \
    Media \
    Property \
    Registry \
    Shortcut \
    TextStyle \
    Upgrade \
    UIText \
    _SummaryInformation \
    _Validation \
;
# Add the cab file to the MSI file
cd "${TMP_FOLDER}"; "${MSIDB}" -d "${OUTPUT}" -a "${CABNAME}"; cd - >/dev/null;
